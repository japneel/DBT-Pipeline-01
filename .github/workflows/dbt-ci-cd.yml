name: dbt CI/CD with temporary Postgres

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # runs daily at 6 AM UTC

jobs:
  dbt-run:
    name: Run dbt models in CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: company_reimbursements
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: GodofWar@1998
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dbt-postgres
        run: |
          python -m pip install --upgrade pip
          pip install dbt-postgres

      - name: Wait for Postgres to be ready
        run: sleep 15

      - name: Create dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cat > ~/.dbt/profiles.yml <<EOF
          reimbursement_project:
            target: dev
            outputs:
              dev:
                type: postgres
                host: localhost
                user: postgres
                password: GodofWar@1998
                port: 5432
                dbname: company_reimbursements
                schema: public
                threads: 1
          EOF

      - name: Prepare test tables and seed data
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=GodofWar@1998 psql -h localhost -U postgres -d company_reimbursements -c "
          CREATE TABLE IF NOT EXISTS departments (
            department_id SERIAL PRIMARY KEY,
            department_name TEXT NOT NULL
          );

          CREATE TABLE IF NOT EXISTS employees (
            employee_id SERIAL PRIMARY KEY,
            full_name TEXT NOT NULL,
            email TEXT NOT NULL,  
            department_id INT REFERENCES departments(department_id)
          );

          CREATE TABLE IF NOT EXISTS reimbursement_types (
            type_id SERIAL PRIMARY KEY,
            type_name TEXT NOT NULL,
            limit_amount INT
          );

          CREATE TABLE IF NOT EXISTS reimbursements (
            reimbursement_id SERIAL PRIMARY KEY,
            employee_id INT REFERENCES employees(employee_id),
            type_id INT REFERENCES reimbursement_types(type_id),
            claim_amount NUMERIC,
            claim_date TIMESTAMP,
            status TEXT,
            notes TEXT
          );

          INSERT INTO reimbursement_types (type_name, limit_amount) VALUES 
            ('Travel', 1000),
            ('Meals', 500);

          INSERT INTO departments (department_id, department_name) VALUES 
            (1, 'Engineering'), 
            (2, 'Finance');

          INSERT INTO employees (employee_id, full_name, email, department_id) VALUES 
            (1, 'Alice Stewart', 'alice.stewart@xxxxmail.com', 1), 
            (2, 'Bob Huges', 'bob.huges@xxxxmail.com', 2);

          INSERT INTO reimbursements (reimbursement_id, employee_id, type_id, claim_amount, claim_date, status, notes) VALUES
            (1, 1, 1, 500.00, NOW(), 'Approved', 'Note 1'),
            (2, 2, 2, 750.00, NOW(), 'Declined', 'Note 2');
          "

      - name: dbt deps
        run: dbt deps

      - name: dbt build
        run: dbt build --no-write-json
      
      - name: dbt test
        run: dbt test --no-write-json

      - name: Upload logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-logs
          path: target/
